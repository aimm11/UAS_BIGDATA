# -*- coding: utf-8 -*-
"""UAS Big Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DqX3ZVAnQD65_0kQP9pxKecxmiVF-c9m

# Import Library
"""

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error

"""# Mount Google Drive"""

from google.colab import drive
drive.mount('/content/drive')

"""# Load Data"""

# Daftar file Excel
file_paths = [
    '/content/drive/MyDrive/Dataset/Produksi Tanaman Sayuran dan Buah–Buahan Semusim Menurut Jenis Tanaman di Kabupaten Sukabumi, 2018.xlsx',
    '/content/drive/MyDrive/Dataset/Produksi Tanaman Sayuran dan Buah–Buahan Semusim Menurut Jenis Tanaman di Kabupaten Sukabumi, 2019.xlsx',
    '/content/drive/MyDrive/Dataset/Produksi Tanaman Sayuran dan Buah–Buahan Semusim Menurut Jenis Tanaman di Kabupaten Sukabumi, 2020.xlsx',
    '/content/drive/MyDrive/Dataset/Produksi Tanaman Sayuran dan Buah–Buahan Semusim Menurut Jenis Tanaman di Kabupaten Sukabumi, 2021.xlsx',
    '/content/drive/MyDrive/Dataset/Produksi Tanaman Sayuran dan Buah–Buahan Semusim Menurut Jenis Tanaman di Kabupaten Sukabumi, 2022.xlsx',
    '/content/drive/MyDrive/Dataset/Produksi Tanaman Sayuran dan Buah–Buahan Semusim Menurut Jenis Tanaman di Kabupaten Sukabumi, 2023.xlsx',
    '/content/drive/MyDrive/Dataset/Produksi Tanaman Sayuran dan Buah–Buahan Semusim Menurut Jenis Tanaman di Kabupaten Sukabumi, 2024.xlsx'
]

# List untuk menyimpan DataFrame
dataframes = []

# Load setiap file Excel ke dalam DataFrame dan tambahkan ke list
for file_path in file_paths:
    try:
        df = pd.read_excel(file_path)
        dataframes.append(df)
    except FileNotFoundError:
        print(f"Error: File not found at {file_path}")
    except Exception as e:
        print(f"Error reading file {file_path}: {e}")

# Menggabungkan beberapa data
df_combined = pd.concat(dataframes, ignore_index=True)

"""# Preprocessing"""

# Cek duplicate value
df_combined.duplicated().sum()

# Cek missing value
df_combined.isnull().sum()

# Menghapus missing value
df_combined = df_combined.dropna()

# Menghapus duplicate value
df_combined = df_combined.drop_duplicates()

# Mengubah angka menjadi 0
df_combined["Produksi Tanaman Sayuran dan Buah-Buahan Semusim"] = pd.to_numeric(
    df_combined["Produksi Tanaman Sayuran dan Buah-Buahan Semusim"], errors='coerce'
)

df_combined["Produksi Tanaman Sayuran dan Buah-Buahan Semusim"] = df_combined["Produksi Tanaman Sayuran dan Buah-Buahan Semusim"].fillna(0).astype(int)

duplikat = df_combined.duplicated().sum()
print(f"Jumlah data duplikat: {duplikat}")

# Menghapus duplicate value
df_combined = df_combined.drop_duplicates()

# Menampilkan missing value
missing_values = df_combined.isnull().sum()
print(missing_values)

# Menampilkan duplicate value
duplicates = df_combined.duplicated().sum()
print(f"Jumlah data duplikat: {duplicates}")

# Menampilkan data yang sudah di preprocessing
df_combined.head(26)

# Daftar tanaman yang ingin diprediksi
daftar_tanaman = ['Bawang Daun/Scallion (kw/qui)',
                  'Bawang Merah/Shallots (kw/qui)',
                  'Bawang Putih/Garlic (kw/qui)',
                  'Bayam/Spinach (kw/qui)',
                  'Buncis/string bean (kw/qui)',
                  'Cabai Rawit/Chili/Cayenne Pepper (kw/qui)',
                  'Kacang Panjang/Long Beans (kw/qui)',
                  'Kangkung/Water Spinach (kw/qui)',
                  'Kembang Kol/Cauliflower (kw/qui)',
                  'Kentang/Potato (kw/qui)',
                  'Ketimun/Cucumber (kw/qui)',
                  'Kubis/Cabbage (kw/qui)',
                  'Labu Siam/Chayote (kw/qui)',
                  'Melon/Melon (kw/qui)',
                  'Paprika/Bell Pepper (kw/qui)',
                  'Petsai/Sawi/Chinese Cabbage/mustard green (kw/qui)',
                  'Semangka/Watermelon (kw/qui)',
                  'Stroberi/Strawberry (kw/qui)',
                  'Terung/Eggplant (kw/qui)',
                  'Tomat/Tomato (kw/qui)',
                  'Wortel/Carrot (kw/qui)',
                  'Cabai Besar/TW/Teropong / Chili/Big chili (kw/qui)',
                  'Cabai Keriting/Chili/Curly chili(kw/qui)',
                  'Jamur Tiram/King Oyster Mushroom (kw/qui)',
                  'Jamur Merang/Straw Mushroom (kw/qui)',
                  'Jamur Lainnya/Mushroom (kw/qui)'

                  ]

# Menentukan variabel fitur & target
X = df_combined[['Jenis Tanaman']]
y = df_combined['Produksi Tanaman Sayuran dan Buah-Buahan Semusim']

# Mengubah fitur kategori (Jenis Tanaman) menjadi bentuk numerik
encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
X_encoded = encoder.fit_transform(X)
feature_names = encoder.get_feature_names_out(['Jenis Tanaman'])
X_encoded_df = pd.DataFrame(X_encoded, columns=feature_names, index=X.index)

"""# Modeling Linear Regression"""

# Split train & test
X_train, X_test, y_train, y_test = train_test_split(X_encoded_df, y, test_size=0.2, random_state=42)

# Modeling Linear Regression
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Prediksi
y_pred = model.predict(X_test)

"""# Visualisasi"""

# Visualisasi Hasil (Actual vs. Predicted)
plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred, alpha=0.6, color='blue', label='Actual vs. Predicted')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2, label='Ideal Prediction')
plt.xlabel("Produksi Aktual")
plt.ylabel("Produksi Prediksi")
plt.title("Prediksi Produksi Tanaman (Actual vs. Predicted)")
plt.legend()
plt.grid(True)
plt.show()

# Visualisasi Bar Chart
plt.figure(figsize=(12, 8))
plt.barh(df_combined['Jenis Tanaman'], df_combined['Produksi Tanaman Sayuran dan Buah-Buahan Semusim'])
plt.xlabel('Produksi (kw/qui)')
plt.title('Produksi Tanaman Sayuran dan Buah-Buahan Semusim - Kabupaten Sukabumi (2024)')
plt.tight_layout()
plt.show()

"""# Evaluasi Model"""

# Evaluasi Model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mape = mean_absolute_percentage_error(y_test, y_pred)

print("MAE :", mae)
print("MSE :", mse)
print("RMSE:", rmse)
print("MAPE:", mape)